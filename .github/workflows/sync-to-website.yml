name: Validate single-file PR and sync to private

# Escuchamos eventos de Pull Request:
# - opened, reopened, synchronize: para validar si sólo se cambió un archivo
# - closed: para sincronizar si el PR se ha mergeado
on:
  pull_request:
    types: [opened, reopened, synchronize, closed]

# Damos los permisos mínimos para leer y escribir contenido (commits, PRs)
permissions:
  contents: write
  pull-requests: write

jobs:
  ###########################################################################
  # 1. VALIDAR PR (que sólo cambie 1 archivo en la carpeta designada)
  ###########################################################################
  validate-pr:
    # Solo corremos este job si NO está "closed" el PR
    if: ${{ github.event.action != 'closed' }}
    runs-on: ubuntu-latest
    steps:
      - name: Verificar archivos modificados
        uses: actions/github-script@v6
        with:
          script: |
            // Obtiene info del PR actual
            const prNumber = context.payload.pull_request.number;

            // Lista los archivos que cambian en este PR
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            // Requerimos EXACTAMENTE 1 archivo modificado
            if (files.length !== 1) {
              core.setFailed(`Este PR modifica ${files.length} archivos. Debe modificar exactamente 1.`);
              return;
            }

            // Verificamos si el archivo está dentro de "projects/" (ajusta la ruta si deseas otra)
            const changedFile = files[0].filename;
            if (!changedFile.startsWith("projects/")) {
              core.setFailed(`El archivo modificado ("${changedFile}") no está en la carpeta 'projects/'.`);
              return;
            }

            // Opcionalmente podrías chequear la extensión o nombre específico
            // if (!changedFile.endsWith(".md")) {
            //   core.setFailed(`Solo se permiten archivos .md en la carpeta projects/`);
            //   return;
            // }

            // Si llega aquí, todo está OK. No hacemos nada más.
            core.notice(`Validación OK. Se modificó el archivo: ${changedFile}`);


  ###########################################################################
  # 2. SINCRONIZAR AL REPO PRIVADO (cuando el PR se cierre y se haya mergeado)
  ###########################################################################
  sync-to-private:
    # Solo corremos si la acción es "closed" Y el PR está mergeado (merged == true)
    if: ${{ github.event.action == 'closed' && github.event.pull_request.merged == true }}
    runs-on: ubuntu-latest
    env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      #######################################################################
      # a) Clonar el estado del repo público en la SHA del merge
      #######################################################################
      - name: Check out public repo (merged commit)
        uses: actions/checkout@v3
        with:
          # Usamos el commit final que se acaba de mergear
          ref: ${{ github.event.pull_request.head.sha }}

      #######################################################################
      # b) Determinar cuál fue el UNICO archivo modificado en el PR
      #######################################################################
      - name: Obtener el archivo único modificado
        id: changed-file
        run: |
          echo "Recuperando info de archivos del PR..."
          # Utilizamos la CLI 'gh' para listar archivos. (GitHub Actions la trae por defecto)
          changed_files=$(gh api repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files --jq '.[].filename')
          
          # Contamos cuántos archivos resultan
          count=$(echo "$changed_files" | wc -l)
          if [ $count -ne 1 ]; then
            echo "ERROR: El PR no tiene exactamente 1 archivo modificado (tiene $count)."
            exit 1
          fi

          # Guardamos en variable de entorno
          file=$changed_files
          echo "Single file modified: $file"
          # Lo asignamos a la salida 'filename' para usarlo en pasos posteriores
          echo "filename=$file" >> $GITHUB_OUTPUT

      #######################################################################
      # c) Construir nombre de rama (minúsculas) según el nombre del archivo
      #######################################################################
      - name: Generar nombre de rama
        id: branch
        run: |
          file="${{ steps.changed-file.outputs.filename }}"
          # Ejemplo: "projects/ejemplo.md"
          base=$(basename "$file")      # "ejemplo.md"
          name_no_ext="${base%.*}"      # "ejemplo"
          branch="${name_no_ext,,}"     # convertir a minúsculas -> "ejemplo"
          echo "branch=$branch" >> $GITHUB_OUTPUT

      #######################################################################
      # d) Obtener autor original (login y email) para el commit
      #######################################################################
      - name: Obtener login y email del autor
        id: author
        run: |
          # Login (nombre de usuario) del autor del PR
          pr_author_login="${{ github.event.pull_request.user.login }}"

          # Vamos a obtener la lista de commits del PR para extraer el email del autor
          commits=$(gh api repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/commits)
          # Tomamos el primer commit y extraemos el email
          # (Ojo: Si el usuario no tiene el email público, puede aparecer "null")
          email=$(echo "$commits" | jq -r '.[0].commit.author.email')

          echo "authorLogin=$pr_author_login" >> $GITHUB_OUTPUT
          echo "authorEmail=$email" >> $GITHUB_OUTPUT

      #######################################################################
      # e) Configurar Git y clonar repositorio privado
      #######################################################################
      - name: Set up Git config
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check out private repo
        uses: actions/checkout@v3
        with:
          repository: reserve-protocol/protocol-docs-website   # <-- tu repo privado
          path: private-repo
          token: ${{ secrets.GITHUB_TOKEN }}

      #######################################################################
      # f) Copiar el archivo único al repo privado y hacer commit
      #######################################################################
      - name: Copiar archivo al repo privado
        run: |
          # Ajusta la ruta destino según necesites, por ejemplo:
          # private-repo/protocol_pages/dtfs/
          mkdir -p private-repo/protocol_pages/dtfs
          cp "${{ steps.changed-file.outputs.filename }}" private-repo/protocol_pages/dtfs/

      - name: Commit and push
        run: |
          cd private-repo
          git checkout -b dtf-page-${{ steps.branch.outputs.branch }}
          git add .
          
          # Construimos un mensaje de commit mencionando usuario y email original
          login="${{ steps.author.outputs.authorLogin }}"
          email="${{ steps.author.outputs.authorEmail }}"
          git commit -m "File from ${login} <${email}>"
          git push -u origin ${{ steps.branch.outputs.branch }}

      #######################################################################
      # g) Crear Pull Request en el repo privado
      #######################################################################
      - name: Create Pull Request in private repo
        uses: actions/github-script@v6
        with:
          script: |
            const octokit = github.getOctokit(process.env.GITHUB_TOKEN);
            const branch = "${{ steps.branch.outputs.branch }}";
            const login = "${{ steps.author.outputs.authorLogin }}";
            const email = "${{ steps.author.outputs.authorEmail }}";

            const { data: pr } = await octokit.rest.pulls.create({
              owner: 'reserve-protocol',
              repo: 'protocol-docs-website',
              title: `Sync single file from ${login}`,
              head: branch,
              base: 'main',
              body: `Este PR sube el archivo modificado por ${login} <${email}>.`
            });
            
            core.setOutput("pr_url", pr.html_url);
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
